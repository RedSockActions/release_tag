name: "RedSock/TagReleaser"
description: "Creates tag based on version of matreshka config file "

author: "RedSock"

branding:
  icon: "flag"
  color: "red"

inputs:
  config_path:
    description: "Path to matreshka config file"
    default: "./config/config.yaml"
  token:
    description: "github token"
    required: true
outputs:
  tag:
    value: ${{ steps.new_tag.outputs.tag }}
    description: "Empty if no new tag has been released"
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Get Latest Tag
      uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
      id: current_tag

    - name: Install dependencies
      shell: bash
      run: |
        pip install pyyaml
        pip install packaging

    - name: Obtain tag
      id: new_tag
      env:
        INPUT_CONFIG_PATH: ${{ inputs.config_path }}
        CURRENT_TAG: ${{ steps.current_tag.outputs.tag }}
        REF: ${{ github.head_ref }}
      shell: python
      run: |
        import yaml
        import os
        from packaging import version
        
        with open(os.environ['INPUT_CONFIG_PATH']) as config_file:
          config_tag = yaml.safe_load(config_file)
          config_tag = config_tag['app_info']['version']
        
        ### Obtaining github latest tag
        current_tag = os.environ['CURRENT_TAG']
        if current_tag == '':
            raise "No current tag"
        if config_tag == '':
            raise "No config tag"
        
        print('current tag is:', current_tag)
        print('config tag is:', config_tag)
        
        if version.parse(config_tag) > version.parse(current_tag):
            with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                print("{0}={1}".format("tag", config_tag), file=f)
        else:
          print(f'current tag ({current_tag}) is greater than config tag ({config_tag})')

    - name: Release
      env:
        GH_TOKEN: ${{ inputs.token }}
      shell: bash
      run: |
        if [[ "${{ steps.new_tag.outputs.tag }}" != "" ]]; then
          gh release create "${{ steps.new_tag.outputs.tag }}" --latest;
        fi